diff --git a/middleware.go b/middleware.go
index 9d5b4aa..c8510c5 100644
--- a/middleware.go
+++ b/middleware.go
@@ -10,8 +10,8 @@ type Request struct {
 	handlers       []Handle
 	total          int
 	nextPosition   int
-	ResponseWriter *AppResponseWriter
 	files          []*UploadedFile
+	ResponseWriter *ResponseWriter
 	*http.Request
 	Params
 }
@@ -19,10 +19,10 @@ type Request struct {
 // Middleware declares the minimum implementation necessary for a handlers
 // to be used as Frodo's middleware route Handlers
 type Middleware interface {
-	Next(w *AppResponseWriter)
+	Next(w *ResponseWriter)
 }
 
-func (r *Request) runHandleChain(w *AppResponseWriter) {
+func (r *Request) runHandleChain(w *ResponseWriter) {
 	r.nextPosition++
 	r.ResponseWriter = w
 	r.handlers[0](w, r)
diff --git a/response.go b/response.go
index ad1d557..edc3cfa 100644
--- a/response.go
+++ b/response.go
@@ -12,24 +12,24 @@ import (
 
 const errorMessage string = "[ERROR] Headers were already written."
 
-// AppResponseWriter is used to hijack/embed http.ResponseWriter
+// ResponseWriter is used to hijack/embed http.ResponseWriter
 // thus making it satisfy the ResponseWriter interface, we then add a written boolean property
 // to trace when a write made, with a couple of other helpful properties
-type AppResponseWriter struct {
+type ResponseWriter struct {
 	http.ResponseWriter
 	headerWritten bool
 	written       bool
 	timeStart     time.Time
 	timeEnd       time.Time
-	duration      time.Duration
-	status        int
+	duration      float64
+	statusCode    int
 	size          int64
 	method        string
 	route         string
 }
 
 // Write writes data back the client/creates the body
-func (w *AppResponseWriter) Write(bytes []byte) (int, error) {
+func (w *ResponseWriter) Write(bytes []byte) (int, error) {
 	if !w.HeaderWritten() {
 		w.WriteHeader(http.StatusOK)
 	}
@@ -39,61 +39,56 @@ func (w *AppResponseWriter) Write(bytes []byte) (int, error) {
 		return 1, errors.New(errorMessage)
 	}
 
-	done, err := w.ResponseWriter.Write(bytes)
+	sent, err := w.ResponseWriter.Write(bytes)
 	if err != nil {
-		return done, err
+		return sent, err
 	}
-	w.size += int64(done)
+	w.size += int64(sent)
 	w.timeEnd = time.Now()
-	w.duration = time.Since(w.timeEnd)
-	return done, nil
+	w.duration = time.Since(w.timeEnd).Seconds()
+	return sent, nil
 }
 
 // WriteHeader writes the Headers out
-func (w *AppResponseWriter) WriteHeader(code int) {
+func (w *ResponseWriter) WriteHeader(code int) {
 	if w.HeaderWritten() {
 		log.Println(errorMessage)
 		return
 	}
 	w.ResponseWriter.WriteHeader(code)
 	w.headerWritten = true
-	w.status = code
+	w.statusCode = code
 }
 
 // ResponseSent checks if a write has been made
 // starts with a header being sent out
-func (w *AppResponseWriter) ResponseSent() bool {
+func (w *ResponseWriter) ResponseSent() bool {
 	return w.written
 }
 
 // HeaderWritten checks if a write has been made
 // starts with a header being sent out
-func (w *AppResponseWriter) HeaderWritten() bool {
+func (w *ResponseWriter) HeaderWritten() bool {
 	return w.headerWritten
 }
 
 // Flush wraps response writer's Flush function.
-func (w *AppResponseWriter) Flush() {
+func (w *ResponseWriter) Flush() {
 	w.ResponseWriter.(http.Flusher).Flush()
 }
 
 // Hijack wraps response writer's Hijack function.
-func (w *AppResponseWriter) Hijack() (net.Conn, *bufio.ReadWriter, error) {
+func (w *ResponseWriter) Hijack() (net.Conn, *bufio.ReadWriter, error) {
 	return w.ResponseWriter.(http.Hijacker).Hijack()
 }
 
 // CloseNotify wraps response writer's CloseNotify function.
-func (w *AppResponseWriter) CloseNotify() <-chan bool {
+func (w *ResponseWriter) CloseNotify() <-chan bool {
 	return w.ResponseWriter.(http.CloseNotifier).CloseNotify()
 }
 
-// Status gets the status code of the response
-func (w *AppResponseWriter) Status() int {
-	return w.status
-}
-
 // Size returns the size of the response
 // about to be sent out
-func (w *AppResponseWriter) Size() int64 {
+func (w *ResponseWriter) Size() int64 {
 	return w.size
 }
diff --git a/router.go b/router.go
index c2aa285..a8b71ac 100644
--- a/router.go
+++ b/router.go
@@ -191,7 +191,7 @@ func (r *Router) ServeFiles(path string, root http.FileSystem) {
 	})
 }
 
-func (r *Router) recover(w *AppResponseWriter, req *Request) {
+func (r *Router) recover(w *ResponseWriter, req *Request) {
 	if err := recover(); err != nil {
 		// if a custom panic handler has been defined
 		// run that instead
@@ -223,11 +223,11 @@ func (r *Router) ServeHTTP(w http.ResponseWriter, req *http.Request) {
 	// 1st things 1st, wrap the response writter
 	// to add the extra functionality we want
 	// basically trace when a write happens
-	FrodoWritter := AppResponseWriter{
+	FrodoWritter := ResponseWriter{
 		ResponseWriter: w,
 		timeStart:      time.Now(),
 		method:         req.Method,
-		route:          req.RequestURI,
+		route:          req.URL.Path,
 	}
 
 	// Wrap the supplied http.Request
